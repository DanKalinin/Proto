// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Api.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ApiRoot

@implementation PB3ApiRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3ApiRoot_FileDescriptor

static GPBFileDescriptor *PB3ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PB3Divide

@implementation PB3Divide

@dynamic a;
@dynamic b;
@dynamic ret;

typedef struct PB3Divide__storage_ {
  uint32_t _has_storage_[1];
  int32_t a;
  int32_t b;
  double ret;
} PB3Divide__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "a",
        .dataTypeSpecific.className = NULL,
        .number = PB3Divide_FieldNumber_A,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Divide__storage_, a),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "b",
        .dataTypeSpecific.className = NULL,
        .number = PB3Divide_FieldNumber_B,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Divide__storage_, b),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = PB3Divide_FieldNumber_Ret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Divide__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Divide class]
                                     rootClass:[PB3ApiRoot class]
                                          file:PB3ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Divide__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Person

@implementation PB3Person

@dynamic name;
@dynamic age;
@dynamic childrenArray, childrenArray_Count;

typedef struct PB3Person__storage_ {
  uint32_t _has_storage_[1];
  uint32_t age;
  NSString *name;
  NSMutableArray *childrenArray;
} PB3Person__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Person_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Person__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = PB3Person_FieldNumber_Age,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Person__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Person),
        .number = PB3Person_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Person__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Person class]
                                     rootClass:[PB3ApiRoot class]
                                          file:PB3ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Person__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetParent

@implementation PB3GetParent

@dynamic hasPerson, person;
@dynamic hasRet, ret;

typedef struct PB3GetParent__storage_ {
  uint32_t _has_storage_[1];
  PB3Person *person;
  PB3Person *ret;
} PB3GetParent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "person",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Person),
        .number = PB3GetParent_FieldNumber_Person,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetParent__storage_, person),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Person),
        .number = PB3GetParent_FieldNumber_Ret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetParent__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetParent class]
                                     rootClass:[PB3ApiRoot class]
                                          file:PB3ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetParent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
